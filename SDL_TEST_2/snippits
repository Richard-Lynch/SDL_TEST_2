

//Select surfaces based on key press
switch( e.key.keysym.sym )
{

case SDLK_UP:
game.gCurrentSurface = game.gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ];
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_UP], NULL, NULL );
break;

case SDLK_DOWN:
game.gCurrentSurface = game.gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ];
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_DOWN], NULL, NULL );
break;

case SDLK_LEFT:
game.gCurrentSurface = game.gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ];
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_LEFT], NULL, NULL );
break;

case SDLK_RIGHT:
game.gCurrentSurface = game.gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ];
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_RIGHT], NULL, NULL );
break;

case SDLK_SPACE:
game.gCurrentSurface = game.gKeyPressSurfaces[ KEY_PRESS_SURFACE_STRETCH ];
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_STRETCH], NULL, NULL );
break;

case SDLK_a:
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_TEXTURE_RENDER], NULL, NULL );
break;

default:
SDL_RenderCopy( game.gRenderer, game.gTexture[KEY_PRESS_SURFACE_DEFAULT], NULL, NULL );
break;
}

//Render red filled quad
SDL_Rect fillRect = { game.SCREEN_WIDTH / 4, game.SCREEN_HEIGHT / 4, game.SCREEN_WIDTH / 2, game.SCREEN_HEIGHT / 2 };
SDL_SetRenderDrawColor( game.gRenderer, 0xFF, 0x00, 0x00, 0xFF );
SDL_RenderFillRect( game.gRenderer, &fillRect );

//Render green outlined quad
SDL_Rect outlineRect = { game.SCREEN_WIDTH / 6, game.SCREEN_HEIGHT / 6, game.SCREEN_WIDTH * 2 / 3, game.SCREEN_HEIGHT * 2 / 3 };
SDL_SetRenderDrawColor( game.gRenderer, 0x00, 0xFF, 0x00, 0xFF );
SDL_RenderDrawRect( game.gRenderer, &outlineRect );

//Draw blue horizontal line
SDL_SetRenderDrawColor( game.gRenderer, 0x00, 0x00, 0xFF, 0xFF );
SDL_RenderDrawLine( game.gRenderer, 0, game.SCREEN_HEIGHT / 2, game.SCREEN_WIDTH, game.SCREEN_HEIGHT / 2 );

//Draw vertical line of yellow dots
SDL_SetRenderDrawColor( game.gRenderer, 0xFF, 0xFF, 0x00, 0xFF );
for( int i = 0; i < game.SCREEN_HEIGHT; i += 4 )
{
SDL_RenderDrawPoint( game.gRenderer, game.SCREEN_WIDTH / 2, i );
}
